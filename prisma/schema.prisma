// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id              String    @id @default(cuid())
    name            String?
    email           String?   @unique
    emailVerified   DateTime?
    image           String?
    accounts        Account[]
    sessions        Session[]
    password        String
    createdThreads  DiscussionThread[] @relation(name: "CreatedThreads")
    joinedThreads   DiscussionThread[] @relation(name: "JoinedThreads")
    posts           DiscussionPost[]
    reviews         BookReview[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Book {
    id            String    @id @default(cuid())
    title         String
    authors       Author[]
    publishedDate DateTime
    isbn          String    @unique
    genres        Genre[]
    minAge        Int       @default(0)
    maxAge        Int       @default(120)
    threads       DiscussionThread[]
    reviews       BookReview[]
    lastActivity  DateTime  @default(now())
    description   String    @default("")

    @@index([title])
}

model Author {
    id    Int     @id @default(autoincrement())
    name  String
    books Book[]
}

model Genre {
    id    Int     @id @default(autoincrement())
    name  String
    books Book[]
}

model BookReview {
    id        Int      @id @default(autoincrement())
    content   String
    rating    Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String
    book        Book   @relation(fields: [bookId], references: [id])
    bookId      String

    @@index([content])

}

// TODO: Private threads
model DiscussionThread {
    id              Int         @id @default(autoincrement())
    title           String
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt
    publishedDate   DateTime    @default(now())
    createdBy       User        @relation(fields: [createdById], references: [id], name: "CreatedThreads")
    createdById     String
    book            Book        @relation(fields: [bookId], references: [id])
    bookId          String
    posts           DiscussionPost[]
    members         User[]      @relation(name: "JoinedThreads")

    @@index([title])
}

model DiscussionPost {
    id        Int      @id @default(autoincrement())
    content   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String
    thread      DiscussionThread @relation(fields: [threadId], references: [id])
    threadId    Int

    @@index([content])
}